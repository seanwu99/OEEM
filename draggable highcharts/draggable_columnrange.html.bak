<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script id="sap-ui-bootstrap" src="https://sapui5.netweaver.ondemand.com/resources/sap-ui-core.js"
            data-sap-ui-theme="sap_bluecrystal" data-sap-ui-libs="sap.ui.core,sap.m,sap.ui.commons,sap.ui.table"
            data-sap-ui-language="en">
    </script>

    <script>
        $(function () {



            /**
             * Draggable points plugin for Highcharts JS
             * Author: Torstein Honsi
             * License: MIT License
             * Version: 2.0.1
             */

            /*global document, Highcharts */
            (function (factory) {
                if (typeof module === 'object' && module.exports) {
                    module.exports = factory;
                } else {
                    factory(Highcharts);
                }
            }(function (Highcharts) {

                'use strict';

                var addEvent = Highcharts.addEvent,
                    each = Highcharts.each,
                    pick = Highcharts.pick;

                /**
                 * Filter by dragMin and dragMax
                 */
                var newH;

                function filterRange(newY, series, XOrY, id) {
//                    log('filterRange ' + id);
//                    if (id == 'newHigh') {
//                        log('newHigh: ' + newY)
//                    }

                    var options = series.options,
                        dragMin = pick(options['dragMin' + XOrY], undefined),
                        dragMax = pick(options['dragMax' + XOrY], undefined);

                    if (newY < dragMin) {
                        newY = dragMin;
                    } else if (newY > dragMax) {
                        newY = dragMax;
                    }

                    if (id == 'newLow') {
                        log('newLow: ' + newY);
//                        log('dragMin: ' + dragMin);
//                        log('dragMax: ' + dragMax);
                        if (newY > dragMax - newH) {
                            newY = dragMax - newH;
                        }

                    }
                    if (id == 'newHigh') {
                        log('newHigh: ' + newY);
//                        log('dragMin: ' + dragMin);
//                        log('dragMax: ' + dragMax);
                        if (newY < newH + dragMin) {
                            newY = newH + dragMin;
                        }

                    }
                    return newY;
                }


                Highcharts.Chart.prototype.callbacks.push(function (chart) {

                    var container = chart.container,
                        dragPoint,
                        dragX,
                        dragY,
                        dragPlotX,
                        dragPlotY,
                        dragPlotHigh,
                        dragPlotLow,
                        changeLow;

                    /**
                     * Get the new values based on the drag event
                     */
                    function getNewPos(e) {
                        var originalEvent = e.originalEvent || e;
                        var pageX = originalEvent.changedTouches ? originalEvent.changedTouches[0].pageX : e.pageX;
                        var pageY = originalEvent.changedTouches ? originalEvent.changedTouches[0].pageY : e.pageY;
                        var draggableX = dragPoint.series.options.draggableX;
                        var draggableY = dragPoint.series.options.draggableY;
                        var deltaX = dragX - pageX;
                        var deltaY = dragY - pageY;
                        var series = dragPoint.series;
                        var newPlotX = dragPlotX - deltaX;
                        var newPlotY = dragPlotY - deltaY;
                        var newX = dragX === undefined ? dragPoint.x : series.xAxis.toValue(newPlotX, true);
                        var newY = dragY === undefined ? dragPoint.y : series.yAxis.toValue(newPlotY, true);

                        newX = filterRange(newX, series, 'X', 'newX');
                        newY = filterRange(newY, series, 'Y', 'newY');
//                        log(' dragPoint.low ==============' + dragPoint.low);
//                        if (dragPoint.low || true) {
                        var newPlotHigh = dragPlotHigh - deltaY,
                            newPlotLow = dragPlotLow - deltaY,
                            newHigh = dragY === undefined ? dragPoint.high : series.yAxis.toValue(newPlotHigh, true),
                            newLow = dragY === undefined ? dragPoint.low : series.yAxis.toValue(newPlotLow, true);
                        newHigh = filterRange(newHigh, series, 'Y', 'newHigh');
                        newLow = filterRange(newLow, series, 'Y', 'newLow');

                        return {
                            x: draggableX ? newX : dragPoint.x,
//                            high: (draggableY && !changeLow) ? newHigh : dragPoint.high,
//                            low: (draggableY && changeLow) ? newLow : dragPoint.low,
                            high: newHigh,
                            low: newLow,
                        };
//                        } else {
//                        return {
//                            x: draggableX ? newX : dragPoint.x,
//                            y: draggableY ? newY : dragPoint.y
//                        };
//                        }

                    }

                    /**
                     * Handler for mouseup
                     */
                    function drop(e) {
                        if (dragPoint) {
                            if (e) {
                                dragPoint.update(getNewPos(e));
                            }
                            delete dragPoint.series.directTouch; // Go back to prototype value
                            dragPoint.firePointEvent('drop');
                        }
                        dragPoint = dragX = dragY = undefined;
                    }

                    /**
                     * Handler for mousedown
                     */
                    function mouseDown(e) {
                        log('mouseDown');
                        log('chart');
                        log(chart);

//newH=e.
                        var options,
                            originalEvent = e.originalEvent || e,
                            hoverPoint,
                            series;


                        if ((originalEvent.target.getAttribute('class') || '').indexOf('highcharts-handle') !== -1) {
                            hoverPoint = originalEvent.target.point;
                        }

                        series = chart.hoverPoint && chart.hoverPoint.series;
                        log('series');
                        log(series);
                        if (!hoverPoint && chart.hoverPoint) {
                            hoverPoint = chart.hoverPoint;
                        }
                        log('hoverPoint');
                        log(hoverPoint);
                        if (hoverPoint) {
                            options = hoverPoint.series.options;
                            if (options.draggableX) {
                                dragPoint = hoverPoint;
                                dragX = originalEvent.changedTouches ? originalEvent.changedTouches[0].pageX : e.pageX;
                                dragPlotX = dragPoint.plotX;
                            }

                            if (options.draggableY) {
                                dragPoint = hoverPoint;

                                dragY = originalEvent.changedTouches ? originalEvent.changedTouches[0].pageY : e.pageY;

                                dragPlotY = dragPoint.plotY + (chart.plotHeight - (dragPoint.yBottom || chart.plotHeight));
                                if (dragPoint.plotHigh) {
                                    dragPlotHigh = dragPoint.plotHigh;
                                    dragPlotLow = dragPoint.plotLow;
                                    changeLow = (Math.abs(dragPlotLow - (dragY - 60)) < Math.abs(dragPlotHigh - (dragY - 60))) ? true : false;
                                }
                                log();
                                log();

                            }

                            // Disable zooming when dragging
                            if (dragPoint) {
                                chart.mouseIsDown = false;
                                dragPoint.series.directTouch = true; // Prevent k-d-tree to cause flickering (#43)
                            }
                        }
                        newH = dragPoint.high - dragPoint.low;
                        log('newH ' + newH);
                    }

                    /**
                     * Handler for mousemove. If the mouse button is pressed, drag the element.
                     */
                    function mouseMove(e) {
//                        log(dragPoint);

                        e.preventDefault();

                        if (dragPoint) {

                            var newPos = getNewPos(e),
                                proceed,
                                series = dragPoint.series;

                            // Fire the 'drag' event with a default action to move the point.
                            dragPoint.firePointEvent(
                                'drag',
                                newPos,
                                function () {
                                    proceed = true;

                                    dragPoint.update(newPos, false);

                                    // Hide halo while dragging (#14)
                                    if (series.halo) {
                                        series.halo = series.halo.destroy();
                                    }

                                    if (chart.tooltip) {
                                        chart.tooltip.refresh(chart.tooltip.shared ? [dragPoint] : dragPoint);
                                    }
                                    if (series.stackKey) {
                                        chart.redraw();
                                    } else {
                                        series.redraw();
                                    }
                                }
                            );

                            // The default handler has not run because of prevented default
                            if (!proceed) {
                                drop();
                            }
                        }
                    }

                    // Kill animation on first drag when chart.animation is set to false.
                    chart.redraw();

                    // Add'em
                    addEvent(container, 'mousemove', mouseMove);
                    addEvent(container, 'touchmove', mouseMove);
                    addEvent(container, 'mousedown', mouseDown);
                    addEvent(container, 'touchstart', mouseDown);
                    addEvent(document, 'mouseup', drop);
                    addEvent(document, 'touchend', drop);
                    addEvent(container, 'mouseleave', drop);
                });

            }));

            function log(o) {
                console.log(o);
            }

            $('#container').highcharts({

                chart: {
                    type: 'columnrange',
                    animation: false,
                    inverted: false
                },
                yAxis: {
//                    min: -1,
//                    max: 11,
                },
                series: [{
                    data: [[1, 3], [2, 4], [3, 8]],

                    cursor: 'ew-resize',
                    draggableY: true,
                    draggableX: false,
                    dragMinY: 0,
                    dragMaxY: 10,
                    dragSensitivity: 1
                }]

            });

        });

    </script>
</head>
<body>
<script src="https://code.highcharts.com/stock/highstock.js"></script>
<script src="https://code.highcharts.com/stock/highcharts-more.js"></script>
<div id="container"></div>
</body>
</html>

